package com.jt.beads;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class BeadImageConverter {
/*
	public static void main(String[] args){

		try{

			Scanner input = new Scanner(System.in);
			JFileChooser imageChooser = new JFileChooser();
			imageChooser.setDialogTitle("Please choose an image to convert:");
			imageChooser.showOpenDialog(null);
			File image = imageChooser.getSelectedFile();//new File(input.next() + ".jpg");
			String imageFileExtension = image.getName().substring(image.getName().length()-4);//.toLowerCase();
			String imageFileName = image.getName().substring(0, image.getName().length()-4);

			imageChooser.setDialogTitle("Please choose a directory to save the converted images");
			imageChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			imageChooser.showOpenDialog(null);
			String saveDirectory = imageChooser.getSelectedFile().getAbsolutePath() + "\\";

			{
				System.out.println("Converting image");
				File newImage = new File(saveDirectory + imageFileName +  3 + "pixel" + imageFileExtension);
				pixelateFile(3,image,newImage,imageFileExtension);
				System.out.println("Conversion complete");
			}

			input.close();

		}catch(Exception e){
			e.printStackTrace();
		}

		JOptionPane.showMessageDialog(null, "Conversion complete!");
	}
*/
	public static void cleanUpPixalatedImage(int pixelSize, BufferedImage image){

		Graphics graphics = image.getGraphics();

		// loop through the image
		for(int w = 0 ; w < image.getWidth() ; w+=pixelSize)
		{
			for(int h = 0 ; h < image.getHeight() ; h+=pixelSize)
			{
				
				HashMap<Color,Integer> commonData = new HashMap<Color,Integer>();;

				//Get a pixel
				Color pixelColor = new Color(image.getRGB(w, h));

				
				//Get an array of the pixels surrounding that pixel, 5x5
				//if(pixelColor.equals(BeadColours.BLACK) || pixelColor.equals(BeadColours.DARK_GREY)|| pixelColor.equals(BeadColours.GREY)|| pixelColor.equals(BeadColours.LIGHT_GREY)){
				//	continue;
				//}else{
					getPixelsAround(w, h, image, commonData);
				//}
				

				//for(Color c : commonData.keySet()){
					//System.out.println(commonData.get(c));
					//System.out.println("col: " + c);
				//}
				//System.out.println("-------------------------");
				
				//Check if the pixel matches or is similar to the most common colours
				boolean endIteration = false;
				for(Color c : commonData.keySet()){
					if(c.equals(pixelColor)){
						//System.out.println("SAME COLOUR FOUND");
						if(commonData.get(c) > 9){
							endIteration = true;
						}
					}
				}
				if(endIteration){
					continue;
				}
				//else change the pixel colour to the most common
				
				Integer maxValue = Collections.max(commonData.values());

				Color mostCommon = pixelColor;
				
				for(Color c: commonData.keySet()){
					if(commonData.get(c).equals(maxValue)){
						mostCommon = c;
					}
				}


				graphics.setColor(mostCommon);
				graphics.fillRect(w, h, pixelSize , pixelSize);




			}
		}

	}
	
	
	private static void getPixelsAround(int x, int y, BufferedImage image, HashMap<Color, Integer> commonData){

		int area = 5;

		int offsetX = x - area;

		int offsetY = y - area;

		for(int i = 0; i < area*2; i++, offsetX++){
			for(int j = 0; j < area*2; j++,offsetY++){

				//check that offsets are in bounds
				if(offsetX < 0 || offsetX > image.getWidth()-1){
					continue;
				}
				if(offsetY < 0 || offsetY > image.getHeight()-1){
					continue;
				}
				
				
				Color pixel = new Color(image.getRGB(offsetX, offsetY));

				//check if the colour is already in the colours list and add it if it's not
				boolean alreadyInList = false;

				for(Color c : commonData.keySet()){
					
					if(c.equals(pixel)){
						alreadyInList = true;
						commonData.put(c, commonData.get(c) + 1);
						break;
					}
				}
				if(!alreadyInList){
					//colours.add(pixel);
					commonData.put(pixel, 1);
				}


			}
			
			offsetY -= area*2;
		}
		

	}


	public static void pixelateFile(int pixelSize, File inputFile, File outputFile, String ext) throws IOException
	{

		// get a BufferedImage object from file
		BufferedImage bufferedImage = ImageIO.read(inputFile);
		Color tempColor = new Color(123,121,164);
		BufferedImage newIm = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		Graphics graphics = newIm.getGraphics();
		graphics.setColor(tempColor);
		graphics.fillRect(0, 0, newIm.getWidth(),newIm.getHeight());
		BufferedImage temp = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		temp.getGraphics().drawImage(newIm, 0, 0, null);
		temp.getGraphics().drawImage(bufferedImage, 0, 0, null);
		bufferedImage = temp;
		newIm = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		graphics = newIm.getGraphics();

		// loop through the image and produce squares pixelSize*pixelSize
		for(int w = 0 ; w < bufferedImage.getWidth() ; w+=pixelSize)
		{
			for(int h = 0 ; h < bufferedImage.getHeight() ; h+=pixelSize)
			{
				Color pixelColor = new Color(bufferedImage.getRGB(w, h));

				if(!pixelColor.equals(tempColor)){

					graphics.setColor(getMostSimilarColor(BeadColours.colorArray,pixelColor));
					graphics.fillRect(w, h, pixelSize, pixelSize);
				}

			}
		}

		cleanUpPixalatedImage(3, newIm);
		// output file
		ImageIO.write(newIm, ext.substring(1), outputFile);

	}
	
	public static BufferedImage pixelateImage(int pixelSize, BufferedImage bufferedImage,boolean doCleanUp) throws IOException
	{

		// get a BufferedImage object from file
		Color tempColor = new Color(123,121,164);
		BufferedImage newIm = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		Graphics graphics = newIm.getGraphics();
		graphics.setColor(tempColor);
		graphics.fillRect(0, 0, newIm.getWidth(),newIm.getHeight());
		BufferedImage temp = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		temp.getGraphics().drawImage(newIm, 0, 0, null);
		temp.getGraphics().drawImage(bufferedImage, 0, 0, null);
		bufferedImage = temp;
		newIm = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		graphics = newIm.getGraphics();

		// loop through the image and produce squares pixelSize*pixelSize
		for(int w = 0 ; w < bufferedImage.getWidth() ; w+=pixelSize)
		{
			for(int h = 0 ; h < bufferedImage.getHeight() ; h+=pixelSize)
			{
				Color pixelColor = new Color(bufferedImage.getRGB(w, h));

				if(!pixelColor.equals(tempColor)){

					graphics.setColor(getMostSimilarColor(BeadColours.colorArray,pixelColor));
					graphics.fillRect(w, h, pixelSize, pixelSize);
				}

			}
		}
		if(doCleanUp){
			cleanUpPixalatedImage(3, newIm);
		}
		return newIm;
		
		

	}

	public static Color getMostSimilarColor(Color[] colorRange, Color checkColor){

		double distance = Double.MAX_VALUE;
		Color mostSimilar = colorRange[0];

		for(Color c : colorRange){
			double tempDistance = colourDistance(c,checkColor);
			if(tempDistance < distance){
				distance = tempDistance;
				mostSimilar = c;
			}
		}


		return mostSimilar;

	}



	public static double colourDistance(Color c1, Color c2)
	{
		double rmean = ( c1.getRed() + c2.getRed() )/2;
		int r = c1.getRed() - c2.getRed();
		int g = c1.getGreen() - c2.getGreen();
		int b = c1.getBlue() - c2.getBlue();
		double weightR = 2 + rmean/256;
		double weightG = 4.0;
		double weightB = 2 + (255-rmean)/256;
		return Math.sqrt(weightR*r*r + weightG*g*g + weightB*b*b);
	}


}
