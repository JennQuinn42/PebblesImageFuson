package com.jt.beads;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.Collections;
import java.util.HashMap;

/**
 * Image file management class for IDE code challenge
 * @author Jenn Quinn based from
 * @author Thomas McSherry
 * @version 1.0
 * 29 September 2015
 */

public class Pixelator {

	public static BufferedImage pixelateImage(BufferedImage bufferedImage,int pixelSize, boolean doCleanUp)
	{

		// get a BufferedImage object from file
		Color tempColor = new Color(123,121,164);
		BufferedImage newIm = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		Graphics graphics = newIm.getGraphics();
		graphics.setColor(tempColor);
		graphics.fillRect(0, 0, newIm.getWidth(),newIm.getHeight());
		BufferedImage temp = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		temp.getGraphics().drawImage(newIm, 0, 0, null);
		temp.getGraphics().drawImage(bufferedImage, 0, 0, null);
		bufferedImage = temp;
		newIm = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), bufferedImage.getType());
		graphics = newIm.getGraphics();

		// loop through the image and produce squares pixelSize*pixelSize
		for(int w = 0 ; w < bufferedImage.getWidth() ; w+=pixelSize)
		{
			for(int h = 0 ; h < bufferedImage.getHeight() ; h+=pixelSize)
			{
				Color pixelColor = new Color(bufferedImage.getRGB(w, h));

				if(!pixelColor.equals(tempColor)){

					graphics.setColor(getMostSimilarColor(BeadColours.colorArray,pixelColor));
					graphics.fillRect(w, h, pixelSize, pixelSize);
				}

			}
		}
		if(doCleanUp){
			cleanUpPixalatedImage(3, newIm);
		}
		return newIm;
		
	}

	public static Color[][] pixelate(int pixelSize, BufferedImage image, boolean doCleanUp){
		// get a BufferedImage object from file
		long tempBeads = Math.round(((double) image.getWidth()/ pixelSize));
		int numBeadsWidth = (int) tempBeads + 2;
		tempBeads =  Math.round(((double) image.getHeight()/ pixelSize));
		int numBeadHeight = (int) tempBeads + 2;
		Color[][] bead = new Color[numBeadsWidth][numBeadHeight];
		int imageHeight = image.getHeight();
		int imageWidth = image.getWidth();
		
		image = pixelateImage(image, pixelSize, doCleanUp);
		// loop through the image and produce squares pixelSize*pixelSize
		for(int w = 0, i = 0 ; w < imageWidth; w+=pixelSize, ++i)
		{
			for(int h = 0, c = 0 ; h < imageHeight ; h+=pixelSize, ++c)
			{
				if(image.getRGB(w, h) == 0){
					bead[i][c] = null;
				}else{
					bead[i][c] = new Color(image.getRGB(w, h));
				}
			}
		}
		return bead;
	}

	private static void getPixelsAround(int x, int y, BufferedImage image, HashMap<Color, Integer> commonData){

		int area = 5;

		int offsetX = x - area;

		int offsetY = y - area;

		for(int i = 0; i < area*2; i++, offsetX++){
			for(int j = 0; j < area*2; j++,offsetY++){

				//check that offsets are in bounds
				if(offsetX < 0 || offsetX > image.getWidth()-1){
					continue;
				}
				if(offsetY < 0 || offsetY > image.getHeight()-1){
					continue;
				}


				Color pixel = new Color(image.getRGB(offsetX, offsetY));

				//check if the colour is already in the colours list and add it if it's not
				boolean alreadyInList = false;

				for(Color c : commonData.keySet()){
					if(c.equals(pixel)){
						alreadyInList = true;
						commonData.put(c, commonData.get(c) + 1);
						break;
					}
				}
				if(!alreadyInList){
					//colours.add(pixel);
					commonData.put(pixel, 1);
				}


			}

			offsetY -= area*2;
		}


	}


	public static Color getMostSimilarColor(Color[] colorRange, Color checkColor){

		double distance = Double.MAX_VALUE;
		Color mostSimilar = colorRange[0];

		for(Color c : colorRange){
			double tempDistance = colourDistance(c,checkColor);
			if(tempDistance < distance){
				distance = tempDistance;
				mostSimilar = c;
			}
		}


		return mostSimilar;

	}

	public static double colourDistance(Color c1, Color c2)
	{
		double rmean = ( c1.getRed() + c2.getRed() )/2;
		int r = c1.getRed() - c2.getRed();
		int g = c1.getGreen() - c2.getGreen();
		int b = c1.getBlue() - c2.getBlue();
		double weightR = 2 + rmean/256;
		double weightG = 4.0;
		double weightB = 2 + (255-rmean)/256;
		return Math.sqrt(weightR*r*r + weightG*g*g + weightB*b*b);
		
	}

	public static void cleanUpPixalatedImage(int pixelSize, BufferedImage image){

		Graphics graphics = image.getGraphics();

		// loop through the image
		for(int w = 0 ; w < image.getWidth() ; w+=pixelSize)
		{
			for(int h = 0 ; h < image.getHeight() ; h+=pixelSize)
			{
				
				HashMap<Color,Integer> commonData = new HashMap<Color,Integer>();;

				//Get a pixel
				Color pixelColor = new Color(image.getRGB(w, h));

				
				//Get an array of the pixels surrounding that pixel, 5x5
				getPixelsAround(w, h, image, commonData);
				
				//Check if the pixel matches or is similar to the most common colours
				boolean endIteration = false;
				for(Color c : commonData.keySet()){
					if(c.equals(pixelColor)){
						if(commonData.get(c) > 9){
							endIteration = true;
						}
					}
				}
				if(endIteration){
					continue;
				}
				//else change the pixel colour to the most common
				
				Integer maxValue = Collections.max(commonData.values());

				Color mostCommon = pixelColor;
				
				for(Color c: commonData.keySet()){
					if(commonData.get(c).equals(maxValue)){
						mostCommon = c;
					}
				}


				graphics.setColor(mostCommon);
				graphics.fillRect(w, h, pixelSize , pixelSize);

			}
		}

	}

}
